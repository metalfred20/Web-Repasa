Ecommerce Repasa V1.0
Unicamente es el frontend.
Vistas en boostrap
Paginacion, 12 items por pagina
Los productos son variables en memoria
Login, unicamente tiene una vista, falta agregar base de datos, pendiente por definir si seran los mismos usuarios de odoo o seran locales 
Navbar
Carrito

WEB-REPASA/
|-- app.py
|-- templates/
|   |-- base.html
|   |-- cart.html
|   |-- index.html
|   |-- login.html
|   |-- product_list_paginated.html
|-- img.png



Explicacion del codigo:
Este código crea una aplicación web simple para una tienda en línea. La aplicación tiene las siguientes características:

Página de inicio
Página de inicio de sesión
Lista de productos paginada
Agregar un producto al carrito
Eliminar un producto del carrito
Editar la cantidad de un producto en el carrito

1. Marco e importaciones:

Flask
render_template, renderiza plantillas HTML.
request, accede a los datos de la solicitud entrante.
redirect, redirige a diferentes rutas.
url_for, genera URL para rutas.

2. Inicialización de la aplicación:
app = Flask(__name__) crea una instancia de la aplicación Flask.

3. Datos:

products: Una lista de 100 diccionarios de productos, cada uno con ID, nombre y precio.
cart: Una lista vacía para almacenar los elementos añadidos al carrito de la compra.

4. Rutas:
/ (): Renderiza la plantilla index.html
/login: Renderiza la plantilla login.html para el inicio de sesión del usuario.
/products:
Maneja la paginación utilizando parámetros de consulta (page y per_page).
Obtiene un subconjunto de productos en función de la paginación.
Calcula el número total de páginas para la paginación.
Renderiza la plantilla product_list_paginated.html con los datos de los productos, el tamaño del carrito y el precio total.
/add_to_cart/<int:product_id>:
Acepta solicitudes POST para añadir un producto al carrito.
Obtiene el producto por ID.
Añade el producto al carrito si se encuentra, de lo contrario devuelve un error 404.
Redirige a la página de la lista de productos.
/cart: Renderiza la plantilla cart.html con los elementos del carrito y el precio total.
/remove_from_cart/<int:product_id>:
Elimina un producto del carrito por ID.
Redirige a la página del carrito.
/edit_quantity/<int:product_id>:
Edita la cantidad de un producto en el carrito utilizando parámetros de consulta.
Redirige a la página del carrito.

5. Funciones auxiliares:
get_product_by_id(product_id): Devuelve un producto de la lista products por su ID.
get_total_price(): Calcula el precio total de los elementos del carrito, teniendo en cuenta las cantidades.
6. Ejecución de la aplicación:

if __name__ == '__main__': garantiza que el código solo se ejecute cuando se ejecuta directamente (no importado como módulo).
app.run(port=5050, debug=True) inicia la aplicación Flask en el puerto 5050 con la depuración habilitada.
Explicación de las rutas:

/ (índice): Esta ruta renderiza la plantilla index.html, que es probablemente la página de inicio de la aplicación.
/login: Esta ruta renderiza la plantilla login.html, que permite a los usuarios iniciar sesión en la aplicación.
/products: Esta ruta maneja la paginación de la lista de productos. Los parámetros de consulta page y per_page se utilizan para determinar qué productos se muestran.
/add_to_cart/<int:product_id>: Esta ruta acepta solicitudes POST para añadir un producto al carrito. El parámetro de consulta product_id especifica el ID del producto que se va a añadir.
/cart: Esta ruta renderiza la plantilla cart.html, que muestra los elementos del carrito y el precio total.
/remove_from_cart/<int:product_id>: Esta ruta elimina un producto del carrito por ID. El parámetro de consulta product_id especifica el ID del producto que se va a eliminar.